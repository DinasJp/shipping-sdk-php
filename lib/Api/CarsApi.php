<?php
/**
 * CarsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Dinas\ShippingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * PHP client for Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@dinas.jp
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dinas\ShippingSdk\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Dinas\ShippingSdk\ApiException;
use Dinas\ShippingSdk\Configuration;
use Dinas\ShippingSdk\DebugPlugin;
use Dinas\ShippingSdk\HeaderSelector;
use Dinas\ShippingSdk\FormDataProcessor;
use Dinas\ShippingSdk\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * CarsApi Class Doc Comment
 *
 * @category Class
 * @package  Dinas\ShippingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CarsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://shipping.dinas.jp');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCarPhotos
     *
     * Get car photos
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dinas\ShippingSdk\Model\AlbumsPaginated
     */
    public function getCarPhotos($status = null, $chassis = null, $search = null, $voyage = null, $photos = null, $on_yard = null, $sort = null, $per_page = null, $page = null)
    {
        list($response) = $this->getCarPhotosWithHttpInfo($status, $chassis, $search, $voyage, $photos, $on_yard, $sort, $per_page, $page);
        return $response;
    }

    /**
     * Operation getCarPhotosWithHttpInfo
     *
     * Get car photos
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dinas\ShippingSdk\Model\AlbumsPaginated, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarPhotosWithHttpInfo($status = null, $chassis = null, $search = null, $voyage = null, $photos = null, $on_yard = null, $sort = null, $per_page = null, $page = null)
    {
        $request = $this->getCarPhotosRequest($status, $chassis, $search, $voyage, $photos, $on_yard, $sort, $per_page, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Dinas\ShippingSdk\Model\AlbumsPaginated',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $request,
                    $response
                );
            }

            return $this->handleResponseWithDataType(
                '\Dinas\ShippingSdk\Model\AlbumsPaginated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dinas\ShippingSdk\Model\AlbumsPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCarPhotosAsync
     *
     * Get car photos
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCarPhotosAsync($status = null, $chassis = null, $search = null, $voyage = null, $photos = null, $on_yard = null, $sort = null, $per_page = null, $page = null)
    {
        return $this->getCarPhotosAsyncWithHttpInfo($status, $chassis, $search, $voyage, $photos, $on_yard, $sort, $per_page, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarPhotosAsyncWithHttpInfo
     *
     * Get car photos
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCarPhotosAsyncWithHttpInfo($status = null, $chassis = null, $search = null, $voyage = null, $photos = null, $on_yard = null, $sort = null, $per_page = null, $page = null)
    {
        $returnType = '\Dinas\ShippingSdk\Model\AlbumsPaginated';
        $request = $this->getCarPhotosRequest($status, $chassis, $search, $voyage, $photos, $on_yard, $sort, $per_page, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarPhotos'
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getCarPhotosRequest($status = null, $chassis = null, $search = null, $voyage = null, $photos = null, $on_yard = null, $sort = null, $per_page = null, $page = null)
    {
        if ($per_page !== null && $per_page > 500) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling CarsApi.getCarPhotos, must be smaller than or equal to 500.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling CarsApi.getCarPhotos, must be bigger than or equal to 1.');
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CarsApi.getCarPhotos, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/cars/photos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($chassis !== null) {
            if('form' === 'form' && is_array($chassis)) {
                foreach($chassis as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['chassis'] = $chassis;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($voyage !== null) {
            if('form' === 'form' && is_array($voyage)) {
                foreach($voyage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['voyage'] = $voyage;
            }
        }
        // query params
        if ($photos !== null) {
            if('form' === 'form' && is_array($photos)) {
                foreach($photos as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photos'] = $photos;
            }
        }
        // query params
        if ($on_yard !== null) {
            if('form' === 'form' && is_array($on_yard)) {
                foreach($on_yard as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['on_yard'] = $on_yard;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $per_page;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Token) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getCars
     *
     * Get paginated list of cars
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  string $vehicle_state Filter by vehicle state (optional)
     * @param  string $vehicle_type Filter by vehicle type (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $docs Filter by documents presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $price_terms Filter by price terms (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dinas\ShippingSdk\Model\CarsPaginated
     */
    public function getCars($status = null, $chassis = null, $search = null, $voyage = null, $vehicle_state = null, $vehicle_type = null, $photos = null, $docs = null, $on_yard = null, $price_terms = null, $sort = null, $per_page = null, $page = null)
    {
        list($response) = $this->getCarsWithHttpInfo($status, $chassis, $search, $voyage, $vehicle_state, $vehicle_type, $photos, $docs, $on_yard, $price_terms, $sort, $per_page, $page);
        return $response;
    }

    /**
     * Operation getCarsWithHttpInfo
     *
     * Get paginated list of cars
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  string $vehicle_state Filter by vehicle state (optional)
     * @param  string $vehicle_type Filter by vehicle type (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $docs Filter by documents presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $price_terms Filter by price terms (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dinas\ShippingSdk\Model\CarsPaginated, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarsWithHttpInfo($status = null, $chassis = null, $search = null, $voyage = null, $vehicle_state = null, $vehicle_type = null, $photos = null, $docs = null, $on_yard = null, $price_terms = null, $sort = null, $per_page = null, $page = null)
    {
        $request = $this->getCarsRequest($status, $chassis, $search, $voyage, $vehicle_state, $vehicle_type, $photos, $docs, $on_yard, $price_terms, $sort, $per_page, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Dinas\ShippingSdk\Model\CarsPaginated',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $request,
                    $response
                );
            }

            return $this->handleResponseWithDataType(
                '\Dinas\ShippingSdk\Model\CarsPaginated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dinas\ShippingSdk\Model\CarsPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCarsAsync
     *
     * Get paginated list of cars
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  string $vehicle_state Filter by vehicle state (optional)
     * @param  string $vehicle_type Filter by vehicle type (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $docs Filter by documents presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $price_terms Filter by price terms (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCarsAsync($status = null, $chassis = null, $search = null, $voyage = null, $vehicle_state = null, $vehicle_type = null, $photos = null, $docs = null, $on_yard = null, $price_terms = null, $sort = null, $per_page = null, $page = null)
    {
        return $this->getCarsAsyncWithHttpInfo($status, $chassis, $search, $voyage, $vehicle_state, $vehicle_type, $photos, $docs, $on_yard, $price_terms, $sort, $per_page, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarsAsyncWithHttpInfo
     *
     * Get paginated list of cars
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  string $vehicle_state Filter by vehicle state (optional)
     * @param  string $vehicle_type Filter by vehicle type (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $docs Filter by documents presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $price_terms Filter by price terms (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCarsAsyncWithHttpInfo($status = null, $chassis = null, $search = null, $voyage = null, $vehicle_state = null, $vehicle_type = null, $photos = null, $docs = null, $on_yard = null, $price_terms = null, $sort = null, $per_page = null, $page = null)
    {
        $returnType = '\Dinas\ShippingSdk\Model\CarsPaginated';
        $request = $this->getCarsRequest($status, $chassis, $search, $voyage, $vehicle_state, $vehicle_type, $photos, $docs, $on_yard, $price_terms, $sort, $per_page, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCars'
     *
     * @param  string $status Filter by car status (optional)
     * @param  string $chassis Filter by chassis number (multiple values separated by spaces) (optional)
     * @param  string $search Search by partial chassis, make, model (optional)
     * @param  string $voyage Filter by voyage (optional)
     * @param  string $vehicle_state Filter by vehicle state (optional)
     * @param  string $vehicle_type Filter by vehicle type (optional)
     * @param  bool $photos Filter by photos presence (optional)
     * @param  bool $docs Filter by documents presence (optional)
     * @param  bool $on_yard Filter by yard presence (optional)
     * @param  string $price_terms Filter by price terms (optional)
     * @param  string $sort Sort field. Prefix with - for descending. **default: -id** (optional)
     * @param  int $per_page Number of items per page. **default: 100** (optional)
     * @param  int $page Page number. **default: 1** (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getCarsRequest($status = null, $chassis = null, $search = null, $voyage = null, $vehicle_state = null, $vehicle_type = null, $photos = null, $docs = null, $on_yard = null, $price_terms = null, $sort = null, $per_page = null, $page = null)
    {
        if ($per_page !== null && $per_page > 500) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling CarsApi.getCars, must be smaller than or equal to 500.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling CarsApi.getCars, must be bigger than or equal to 1.');
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CarsApi.getCars, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/cars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($chassis !== null) {
            if('form' === 'form' && is_array($chassis)) {
                foreach($chassis as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['chassis'] = $chassis;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($voyage !== null) {
            if('form' === 'form' && is_array($voyage)) {
                foreach($voyage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['voyage'] = $voyage;
            }
        }
        // query params
        if ($vehicle_state !== null) {
            if('form' === 'form' && is_array($vehicle_state)) {
                foreach($vehicle_state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['vehicle_state'] = $vehicle_state;
            }
        }
        // query params
        if ($vehicle_type !== null) {
            if('form' === 'form' && is_array($vehicle_type)) {
                foreach($vehicle_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['vehicle_type'] = $vehicle_type;
            }
        }
        // query params
        if ($photos !== null) {
            if('form' === 'form' && is_array($photos)) {
                foreach($photos as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photos'] = $photos;
            }
        }
        // query params
        if ($docs !== null) {
            if('form' === 'form' && is_array($docs)) {
                foreach($docs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['docs'] = $docs;
            }
        }
        // query params
        if ($on_yard !== null) {
            if('form' === 'form' && is_array($on_yard)) {
                foreach($on_yard as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['on_yard'] = $on_yard;
            }
        }
        // query params
        if ($price_terms !== null) {
            if('form' === 'form' && is_array($price_terms)) {
                foreach($price_terms as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['price_terms'] = $price_terms;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $per_page;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Token) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation storeCarDocuments
     *
     * Store car documents
     *
     * @param  \Dinas\ShippingSdk\Model\DocumentData[] $items items (required)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dinas\ShippingSdk\Model\ActionResponse
     */
    public function storeCarDocuments($items)
    {
        list($response) = $this->storeCarDocumentsWithHttpInfo($items);
        return $response;
    }

    /**
     * Operation storeCarDocumentsWithHttpInfo
     *
     * Store car documents
     *
     * @param  \Dinas\ShippingSdk\Model\DocumentData[] $items (required)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dinas\ShippingSdk\Model\ActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeCarDocumentsWithHttpInfo($items)
    {
        $request = $this->storeCarDocumentsRequest($items);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    return $this->handleResponseWithDataType(
                        '\Dinas\ShippingSdk\Model\ActionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $request,
                    $response
                );
            }

            return $this->handleResponseWithDataType(
                '\Dinas\ShippingSdk\Model\ActionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dinas\ShippingSdk\Model\ActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storeCarDocumentsAsync
     *
     * Store car documents
     *
     * @param  \Dinas\ShippingSdk\Model\DocumentData[] $items (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function storeCarDocumentsAsync($items)
    {
        return $this->storeCarDocumentsAsyncWithHttpInfo($items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeCarDocumentsAsyncWithHttpInfo
     *
     * Store car documents
     *
     * @param  \Dinas\ShippingSdk\Model\DocumentData[] $items (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function storeCarDocumentsAsyncWithHttpInfo($items)
    {
        $returnType = '\Dinas\ShippingSdk\Model\ActionResponse';
        $request = $this->storeCarDocumentsRequest($items);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeCarDocuments'
     *
     * @param  \Dinas\ShippingSdk\Model\DocumentData[] $items (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function storeCarDocumentsRequest($items)
    {
        // verify the required parameter 'items' is set
        if ($items === null || (is_array($items) && count($items) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items when calling storeCarDocuments'
            );
        }
        if (count($items) > 20) {
            throw new \InvalidArgumentException('invalid value for "$items" when calling CarsApi.storeCarDocuments, number of items must be less than or equal to 20.');
        }


        $resourcePath = '/api/cars/docs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'items' => $items,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'multipart/form-data',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Token) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation storeCarPhotos
     *
     * Store car photos
     *
     * @param  \Dinas\ShippingSdk\Model\AlbumData[] $items items (required)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dinas\ShippingSdk\Model\ActionResponse
     */
    public function storeCarPhotos($items)
    {
        list($response) = $this->storeCarPhotosWithHttpInfo($items);
        return $response;
    }

    /**
     * Operation storeCarPhotosWithHttpInfo
     *
     * Store car photos
     *
     * @param  \Dinas\ShippingSdk\Model\AlbumData[] $items (required)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dinas\ShippingSdk\Model\ActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeCarPhotosWithHttpInfo($items)
    {
        $request = $this->storeCarPhotosRequest($items);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    return $this->handleResponseWithDataType(
                        '\Dinas\ShippingSdk\Model\ActionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $request,
                    $response
                );
            }

            return $this->handleResponseWithDataType(
                '\Dinas\ShippingSdk\Model\ActionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dinas\ShippingSdk\Model\ActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storeCarPhotosAsync
     *
     * Store car photos
     *
     * @param  \Dinas\ShippingSdk\Model\AlbumData[] $items (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function storeCarPhotosAsync($items)
    {
        return $this->storeCarPhotosAsyncWithHttpInfo($items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeCarPhotosAsyncWithHttpInfo
     *
     * Store car photos
     *
     * @param  \Dinas\ShippingSdk\Model\AlbumData[] $items (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function storeCarPhotosAsyncWithHttpInfo($items)
    {
        $returnType = '\Dinas\ShippingSdk\Model\ActionResponse';
        $request = $this->storeCarPhotosRequest($items);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeCarPhotos'
     *
     * @param  \Dinas\ShippingSdk\Model\AlbumData[] $items (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function storeCarPhotosRequest($items)
    {
        // verify the required parameter 'items' is set
        if ($items === null || (is_array($items) && count($items) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items when calling storeCarPhotos'
            );
        }
        if (count($items) > 20) {
            throw new \InvalidArgumentException('invalid value for "$items" when calling CarsApi.storeCarPhotos, number of items must be less than or equal to 20.');
        }


        $resourcePath = '/api/cars/photos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'items' => $items,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'multipart/form-data',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Token) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation syncCars
     *
     * Create or update cars
     *
     * @param  \Dinas\ShippingSdk\Model\CarData[] $car_data car_data (required)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dinas\ShippingSdk\Model\CarSyncResponse
     */
    public function syncCars($car_data)
    {
        list($response) = $this->syncCarsWithHttpInfo($car_data);
        return $response;
    }

    /**
     * Operation syncCarsWithHttpInfo
     *
     * Create or update cars
     *
     * @param  \Dinas\ShippingSdk\Model\CarData[] $car_data (required)
     *
     * @throws \Dinas\ShippingSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dinas\ShippingSdk\Model\CarSyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncCarsWithHttpInfo($car_data)
    {
        $request = $this->syncCarsRequest($car_data);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Dinas\ShippingSdk\Model\CarSyncResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $request,
                    $response
                );
            }

            return $this->handleResponseWithDataType(
                '\Dinas\ShippingSdk\Model\CarSyncResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dinas\ShippingSdk\Model\CarSyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation syncCarsAsync
     *
     * Create or update cars
     *
     * @param  \Dinas\ShippingSdk\Model\CarData[] $car_data (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function syncCarsAsync($car_data)
    {
        return $this->syncCarsAsyncWithHttpInfo($car_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncCarsAsyncWithHttpInfo
     *
     * Create or update cars
     *
     * @param  \Dinas\ShippingSdk\Model\CarData[] $car_data (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function syncCarsAsyncWithHttpInfo($car_data)
    {
        $returnType = '\Dinas\ShippingSdk\Model\CarSyncResponse';
        $request = $this->syncCarsRequest($car_data);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncCars'
     *
     * @param  \Dinas\ShippingSdk\Model\CarData[] $car_data (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function syncCarsRequest($car_data)
    {
        // verify the required parameter 'car_data' is set
        if ($car_data === null || (is_array($car_data) && count($car_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $car_data when calling syncCars'
            );
        }

        $resourcePath = '/api/cars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($car_data)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($car_data));
            } else {
                $httpBody = $car_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Token) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
			$request,
                        $response,
                        $exception
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
