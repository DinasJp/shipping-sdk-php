<?php
/**
 * CarPrices
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Dinas\ShippingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * PHP client for Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@dinas.jp
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dinas\ShippingSdk\Model;

use \ArrayAccess;
use \Dinas\ShippingSdk\ObjectSerializer;

/**
 * CarPrices Class Doc Comment
 *
 * @category Class
 * @description Price breakdown
 * @package  Dinas\ShippingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CarPrices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarPrices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rate' => 'float',
        'freight_main' => 'int',
        'freight_secondary' => 'int',
        'dismantle' => 'int',
        'discount' => 'int',
        'forklift' => 'int',
        'delivery' => 'int',
        'service' => 'int',
        'yard_storage_cnf' => 'int',
        'yard_storage_fob' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rate' => null,
        'freight_main' => null,
        'freight_secondary' => null,
        'dismantle' => null,
        'discount' => null,
        'forklift' => null,
        'delivery' => null,
        'service' => null,
        'yard_storage_cnf' => null,
        'yard_storage_fob' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'rate' => false,
        'freight_main' => false,
        'freight_secondary' => false,
        'dismantle' => false,
        'discount' => false,
        'forklift' => false,
        'delivery' => false,
        'service' => false,
        'yard_storage_cnf' => false,
        'yard_storage_fob' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rate' => 'rate',
        'freight_main' => 'freight_main',
        'freight_secondary' => 'freight_secondary',
        'dismantle' => 'dismantle',
        'discount' => 'discount',
        'forklift' => 'forklift',
        'delivery' => 'delivery',
        'service' => 'service',
        'yard_storage_cnf' => 'yard_storage_cnf',
        'yard_storage_fob' => 'yard_storage_fob'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rate' => 'setRate',
        'freight_main' => 'setFreightMain',
        'freight_secondary' => 'setFreightSecondary',
        'dismantle' => 'setDismantle',
        'discount' => 'setDiscount',
        'forklift' => 'setForklift',
        'delivery' => 'setDelivery',
        'service' => 'setService',
        'yard_storage_cnf' => 'setYardStorageCnf',
        'yard_storage_fob' => 'setYardStorageFob'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rate' => 'getRate',
        'freight_main' => 'getFreightMain',
        'freight_secondary' => 'getFreightSecondary',
        'dismantle' => 'getDismantle',
        'discount' => 'getDiscount',
        'forklift' => 'getForklift',
        'delivery' => 'getDelivery',
        'service' => 'getService',
        'yard_storage_cnf' => 'getYardStorageCnf',
        'yard_storage_fob' => 'getYardStorageFob'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('freight_main', $data ?? [], null);
        $this->setIfExists('freight_secondary', $data ?? [], null);
        $this->setIfExists('dismantle', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('forklift', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('yard_storage_cnf', $data ?? [], null);
        $this->setIfExists('yard_storage_fob', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate USD Rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets freight_main
     *
     * @return int|null
     */
    public function getFreightMain()
    {
        return $this->container['freight_main'];
    }

    /**
     * Sets freight_main
     *
     * @param int|null $freight_main Freight cost for shipper, in JPY
     *
     * @return self
     */
    public function setFreightMain($freight_main)
    {
        if (is_null($freight_main)) {
            throw new \InvalidArgumentException('non-nullable freight_main cannot be null');
        }
        $this->container['freight_main'] = $freight_main;

        return $this;
    }

    /**
     * Gets freight_secondary
     *
     * @return int|null
     */
    public function getFreightSecondary()
    {
        return $this->container['freight_secondary'];
    }

    /**
     * Sets freight_secondary
     *
     * @param int|null $freight_secondary Freight cost for consignee, in USD
     *
     * @return self
     */
    public function setFreightSecondary($freight_secondary)
    {
        if (is_null($freight_secondary)) {
            throw new \InvalidArgumentException('non-nullable freight_secondary cannot be null');
        }
        $this->container['freight_secondary'] = $freight_secondary;

        return $this;
    }

    /**
     * Gets dismantle
     *
     * @return int|null
     */
    public function getDismantle()
    {
        return $this->container['dismantle'];
    }

    /**
     * Sets dismantle
     *
     * @param int|null $dismantle Dismantle cost
     *
     * @return self
     */
    public function setDismantle($dismantle)
    {
        if (is_null($dismantle)) {
            throw new \InvalidArgumentException('non-nullable dismantle cannot be null');
        }
        $this->container['dismantle'] = $dismantle;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return int|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int|null $discount Discount amount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets forklift
     *
     * @return int|null
     */
    public function getForklift()
    {
        return $this->container['forklift'];
    }

    /**
     * Sets forklift
     *
     * @param int|null $forklift Forklift cost
     *
     * @return self
     */
    public function setForklift($forklift)
    {
        if (is_null($forklift)) {
            throw new \InvalidArgumentException('non-nullable forklift cannot be null');
        }
        $this->container['forklift'] = $forklift;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return int|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param int|null $delivery Delivery cost
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets service
     *
     * @return int|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param int|null $service Service cost
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets yard_storage_cnf
     *
     * @return int|null
     */
    public function getYardStorageCnf()
    {
        return $this->container['yard_storage_cnf'];
    }

    /**
     * Sets yard_storage_cnf
     *
     * @param int|null $yard_storage_cnf Yard storage cost for shipper
     *
     * @return self
     */
    public function setYardStorageCnf($yard_storage_cnf)
    {
        if (is_null($yard_storage_cnf)) {
            throw new \InvalidArgumentException('non-nullable yard_storage_cnf cannot be null');
        }
        $this->container['yard_storage_cnf'] = $yard_storage_cnf;

        return $this;
    }

    /**
     * Gets yard_storage_fob
     *
     * @return int|null
     */
    public function getYardStorageFob()
    {
        return $this->container['yard_storage_fob'];
    }

    /**
     * Sets yard_storage_fob
     *
     * @param int|null $yard_storage_fob Yard storage cost for consignee
     *
     * @return self
     */
    public function setYardStorageFob($yard_storage_fob)
    {
        if (is_null($yard_storage_fob)) {
            throw new \InvalidArgumentException('non-nullable yard_storage_fob cannot be null');
        }
        $this->container['yard_storage_fob'] = $yard_storage_fob;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


