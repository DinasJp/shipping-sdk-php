<?php
/**
 * CarData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * PHP client for Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@dinas.jp
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dinas\ShippingClient\Model;

use \ArrayAccess;
use \Dinas\ShippingClient\ObjectSerializer;

/**
 * CarData Class Doc Comment
 *
 * @category Class
 * @description Create/Update car payload
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CarData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'chassis' => 'string',
        'make' => 'string',
        'model' => 'string',
        'year' => 'int',
        'color' => 'string',
        'export_type' => '\Dinas\ShippingClient\Model\ExportType',
        'export_method' => '\Dinas\ShippingClient\Model\ExportMethod',
        'vehicle_type' => '\Dinas\ShippingClient\Model\VehicleType',
        'fuel' => '\Dinas\ShippingClient\Model\FuelType',
        'engine_model' => 'string',
        'engine_number' => 'string',
        'engine_size' => 'float',
        'engine_power' => 'float',
        'seats' => 'int',
        'cargo_capacity' => 'int',
        'net_weight' => 'float',
        'gross_weight' => 'float',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'price_terms' => '\Dinas\ShippingClient\Model\PriceTerms',
        'unit_price' => 'float',
        'purchase_date' => '\DateTime',
        'damaged' => 'bool',
        'ship_date_limit' => '\Dinas\ShippingClient\Model\ShipDateLimit',
        'withhold' => 'string',
        'note' => 'string',
        'dealer' => '\Dinas\ShippingClient\Model\Dealer',
        'pol' => 'string',
        'hold' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'chassis' => null,
        'make' => null,
        'model' => null,
        'year' => null,
        'color' => null,
        'export_type' => null,
        'export_method' => null,
        'vehicle_type' => null,
        'fuel' => null,
        'engine_model' => null,
        'engine_number' => null,
        'engine_size' => null,
        'engine_power' => null,
        'seats' => null,
        'cargo_capacity' => null,
        'net_weight' => null,
        'gross_weight' => null,
        'length' => null,
        'width' => null,
        'height' => null,
        'price_terms' => null,
        'unit_price' => null,
        'purchase_date' => 'date',
        'damaged' => null,
        'ship_date_limit' => null,
        'withhold' => null,
        'note' => null,
        'dealer' => null,
        'pol' => null,
        'hold' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'chassis' => false,
        'make' => false,
        'model' => false,
        'year' => true,
        'color' => true,
        'export_type' => false,
        'export_method' => false,
        'vehicle_type' => false,
        'fuel' => false,
        'engine_model' => true,
        'engine_number' => true,
        'engine_size' => true,
        'engine_power' => true,
        'seats' => true,
        'cargo_capacity' => true,
        'net_weight' => true,
        'gross_weight' => true,
        'length' => true,
        'width' => true,
        'height' => true,
        'price_terms' => false,
        'unit_price' => true,
        'purchase_date' => true,
        'damaged' => true,
        'ship_date_limit' => false,
        'withhold' => true,
        'note' => true,
        'dealer' => false,
        'pol' => true,
        'hold' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'chassis' => 'chassis',
        'make' => 'make',
        'model' => 'model',
        'year' => 'year',
        'color' => 'color',
        'export_type' => 'export_type',
        'export_method' => 'export_method',
        'vehicle_type' => 'vehicle_type',
        'fuel' => 'fuel',
        'engine_model' => 'engine_model',
        'engine_number' => 'engine_number',
        'engine_size' => 'engine_size',
        'engine_power' => 'engine_power',
        'seats' => 'seats',
        'cargo_capacity' => 'cargo_capacity',
        'net_weight' => 'net_weight',
        'gross_weight' => 'gross_weight',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'price_terms' => 'price_terms',
        'unit_price' => 'unit_price',
        'purchase_date' => 'purchase_date',
        'damaged' => 'damaged',
        'ship_date_limit' => 'ship_date_limit',
        'withhold' => 'withhold',
        'note' => 'note',
        'dealer' => 'dealer',
        'pol' => 'pol',
        'hold' => 'hold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'chassis' => 'setChassis',
        'make' => 'setMake',
        'model' => 'setModel',
        'year' => 'setYear',
        'color' => 'setColor',
        'export_type' => 'setExportType',
        'export_method' => 'setExportMethod',
        'vehicle_type' => 'setVehicleType',
        'fuel' => 'setFuel',
        'engine_model' => 'setEngineModel',
        'engine_number' => 'setEngineNumber',
        'engine_size' => 'setEngineSize',
        'engine_power' => 'setEnginePower',
        'seats' => 'setSeats',
        'cargo_capacity' => 'setCargoCapacity',
        'net_weight' => 'setNetWeight',
        'gross_weight' => 'setGrossWeight',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'price_terms' => 'setPriceTerms',
        'unit_price' => 'setUnitPrice',
        'purchase_date' => 'setPurchaseDate',
        'damaged' => 'setDamaged',
        'ship_date_limit' => 'setShipDateLimit',
        'withhold' => 'setWithhold',
        'note' => 'setNote',
        'dealer' => 'setDealer',
        'pol' => 'setPol',
        'hold' => 'setHold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'chassis' => 'getChassis',
        'make' => 'getMake',
        'model' => 'getModel',
        'year' => 'getYear',
        'color' => 'getColor',
        'export_type' => 'getExportType',
        'export_method' => 'getExportMethod',
        'vehicle_type' => 'getVehicleType',
        'fuel' => 'getFuel',
        'engine_model' => 'getEngineModel',
        'engine_number' => 'getEngineNumber',
        'engine_size' => 'getEngineSize',
        'engine_power' => 'getEnginePower',
        'seats' => 'getSeats',
        'cargo_capacity' => 'getCargoCapacity',
        'net_weight' => 'getNetWeight',
        'gross_weight' => 'getGrossWeight',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'price_terms' => 'getPriceTerms',
        'unit_price' => 'getUnitPrice',
        'purchase_date' => 'getPurchaseDate',
        'damaged' => 'getDamaged',
        'ship_date_limit' => 'getShipDateLimit',
        'withhold' => 'getWithhold',
        'note' => 'getNote',
        'dealer' => 'getDealer',
        'pol' => 'getPol',
        'hold' => 'getHold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('chassis', $data ?? [], null);
        $this->setIfExists('make', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('export_type', $data ?? [], null);
        $this->setIfExists('export_method', $data ?? [], null);
        $this->setIfExists('vehicle_type', $data ?? [], null);
        $this->setIfExists('fuel', $data ?? [], null);
        $this->setIfExists('engine_model', $data ?? [], null);
        $this->setIfExists('engine_number', $data ?? [], null);
        $this->setIfExists('engine_size', $data ?? [], null);
        $this->setIfExists('engine_power', $data ?? [], null);
        $this->setIfExists('seats', $data ?? [], null);
        $this->setIfExists('cargo_capacity', $data ?? [], null);
        $this->setIfExists('net_weight', $data ?? [], null);
        $this->setIfExists('gross_weight', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('price_terms', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('purchase_date', $data ?? [], null);
        $this->setIfExists('damaged', $data ?? [], null);
        $this->setIfExists('ship_date_limit', $data ?? [], null);
        $this->setIfExists('withhold', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('dealer', $data ?? [], null);
        $this->setIfExists('pol', $data ?? [], null);
        $this->setIfExists('hold', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['chassis'] === null) {
            $invalidProperties[] = "'chassis' can't be null";
        }
        if ((mb_strlen($this->container['chassis']) > 50)) {
            $invalidProperties[] = "invalid value for 'chassis', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['chassis']) < 4)) {
            $invalidProperties[] = "invalid value for 'chassis', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['make'] === null) {
            $invalidProperties[] = "'make' can't be null";
        }
        if ((mb_strlen($this->container['make']) > 50)) {
            $invalidProperties[] = "invalid value for 'make', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ((mb_strlen($this->container['model']) > 50)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['year']) && ($this->container['year'] < 1900)) {
            $invalidProperties[] = "invalid value for 'year', must be bigger than or equal to 1900.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) > 25)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['engine_model']) && (mb_strlen($this->container['engine_model']) > 50)) {
            $invalidProperties[] = "invalid value for 'engine_model', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['engine_number']) && (mb_strlen($this->container['engine_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'engine_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['engine_size']) && ($this->container['engine_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'engine_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['engine_power']) && ($this->container['engine_power'] < 0)) {
            $invalidProperties[] = "invalid value for 'engine_power', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['seats']) && ($this->container['seats'] > 50)) {
            $invalidProperties[] = "invalid value for 'seats', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['seats']) && ($this->container['seats'] < 1)) {
            $invalidProperties[] = "invalid value for 'seats', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cargo_capacity']) && ($this->container['cargo_capacity'] < 0)) {
            $invalidProperties[] = "invalid value for 'cargo_capacity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['net_weight']) && ($this->container['net_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['gross_weight']) && ($this->container['gross_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'gross_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['length']) && ($this->container['length'] < 0)) {
            $invalidProperties[] = "invalid value for 'length', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 0)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] < 0)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be bigger than or equal to 0.";
        }

        if ($this->container['purchase_date'] === null) {
            $invalidProperties[] = "'purchase_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Car ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets chassis
     *
     * @return string
     */
    public function getChassis()
    {
        return $this->container['chassis'];
    }

    /**
     * Sets chassis
     *
     * @param string $chassis Chassis number
     *
     * @return self
     */
    public function setChassis($chassis)
    {
        if (is_null($chassis)) {
            throw new \InvalidArgumentException('non-nullable chassis cannot be null');
        }
        if ((mb_strlen($chassis) > 50)) {
            throw new \InvalidArgumentException('invalid length for $chassis when calling CarData., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($chassis) < 4)) {
            throw new \InvalidArgumentException('invalid length for $chassis when calling CarData., must be bigger than or equal to 4.');
        }

        $this->container['chassis'] = $chassis;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make Car manufacturer
     *
     * @return self
     */
    public function setMake($make)
    {
        if (is_null($make)) {
            throw new \InvalidArgumentException('non-nullable make cannot be null');
        }
        if ((mb_strlen($make) > 50)) {
            throw new \InvalidArgumentException('invalid length for $make when calling CarData., must be smaller than or equal to 50.');
        }

        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Car model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        if ((mb_strlen($model) > 50)) {
            throw new \InvalidArgumentException('invalid length for $model when calling CarData., must be smaller than or equal to 50.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year Manufacturing year
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            array_push($this->openAPINullablesSetToNull, 'year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($year) && ($year < 1900)) {
            throw new \InvalidArgumentException('invalid value for $year when calling CarData., must be bigger than or equal to 1900.');
        }

        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Car color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($color) && (mb_strlen($color) > 25)) {
            throw new \InvalidArgumentException('invalid length for $color when calling CarData., must be smaller than or equal to 25.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets export_type
     *
     * @return \Dinas\ShippingClient\Model\ExportType|null
     */
    public function getExportType()
    {
        return $this->container['export_type'];
    }

    /**
     * Sets export_type
     *
     * @param \Dinas\ShippingClient\Model\ExportType|null $export_type export_type
     *
     * @return self
     */
    public function setExportType($export_type)
    {
        if (is_null($export_type)) {
            throw new \InvalidArgumentException('non-nullable export_type cannot be null');
        }
        $this->container['export_type'] = $export_type;

        return $this;
    }

    /**
     * Gets export_method
     *
     * @return \Dinas\ShippingClient\Model\ExportMethod|null
     */
    public function getExportMethod()
    {
        return $this->container['export_method'];
    }

    /**
     * Sets export_method
     *
     * @param \Dinas\ShippingClient\Model\ExportMethod|null $export_method export_method
     *
     * @return self
     */
    public function setExportMethod($export_method)
    {
        if (is_null($export_method)) {
            throw new \InvalidArgumentException('non-nullable export_method cannot be null');
        }
        $this->container['export_method'] = $export_method;

        return $this;
    }

    /**
     * Gets vehicle_type
     *
     * @return \Dinas\ShippingClient\Model\VehicleType|null
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     *
     * @param \Dinas\ShippingClient\Model\VehicleType|null $vehicle_type vehicle_type
     *
     * @return self
     */
    public function setVehicleType($vehicle_type)
    {
        if (is_null($vehicle_type)) {
            throw new \InvalidArgumentException('non-nullable vehicle_type cannot be null');
        }
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return \Dinas\ShippingClient\Model\FuelType|null
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param \Dinas\ShippingClient\Model\FuelType|null $fuel fuel
     *
     * @return self
     */
    public function setFuel($fuel)
    {
        if (is_null($fuel)) {
            throw new \InvalidArgumentException('non-nullable fuel cannot be null');
        }
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets engine_model
     *
     * @return string|null
     */
    public function getEngineModel()
    {
        return $this->container['engine_model'];
    }

    /**
     * Sets engine_model
     *
     * @param string|null $engine_model Engine model
     *
     * @return self
     */
    public function setEngineModel($engine_model)
    {
        if (is_null($engine_model)) {
            array_push($this->openAPINullablesSetToNull, 'engine_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($engine_model) && (mb_strlen($engine_model) > 50)) {
            throw new \InvalidArgumentException('invalid length for $engine_model when calling CarData., must be smaller than or equal to 50.');
        }

        $this->container['engine_model'] = $engine_model;

        return $this;
    }

    /**
     * Gets engine_number
     *
     * @return string|null
     */
    public function getEngineNumber()
    {
        return $this->container['engine_number'];
    }

    /**
     * Sets engine_number
     *
     * @param string|null $engine_number Engine number
     *
     * @return self
     */
    public function setEngineNumber($engine_number)
    {
        if (is_null($engine_number)) {
            array_push($this->openAPINullablesSetToNull, 'engine_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($engine_number) && (mb_strlen($engine_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $engine_number when calling CarData., must be smaller than or equal to 50.');
        }

        $this->container['engine_number'] = $engine_number;

        return $this;
    }

    /**
     * Gets engine_size
     *
     * @return float|null
     */
    public function getEngineSize()
    {
        return $this->container['engine_size'];
    }

    /**
     * Sets engine_size
     *
     * @param float|null $engine_size Engine size in cc
     *
     * @return self
     */
    public function setEngineSize($engine_size)
    {
        if (is_null($engine_size)) {
            array_push($this->openAPINullablesSetToNull, 'engine_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($engine_size) && ($engine_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $engine_size when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['engine_size'] = $engine_size;

        return $this;
    }

    /**
     * Gets engine_power
     *
     * @return float|null
     */
    public function getEnginePower()
    {
        return $this->container['engine_power'];
    }

    /**
     * Sets engine_power
     *
     * @param float|null $engine_power Engine power
     *
     * @return self
     */
    public function setEnginePower($engine_power)
    {
        if (is_null($engine_power)) {
            array_push($this->openAPINullablesSetToNull, 'engine_power');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_power', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($engine_power) && ($engine_power < 0)) {
            throw new \InvalidArgumentException('invalid value for $engine_power when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['engine_power'] = $engine_power;

        return $this;
    }

    /**
     * Gets seats
     *
     * @return int|null
     */
    public function getSeats()
    {
        return $this->container['seats'];
    }

    /**
     * Sets seats
     *
     * @param int|null $seats Number of seats
     *
     * @return self
     */
    public function setSeats($seats)
    {
        if (is_null($seats)) {
            array_push($this->openAPINullablesSetToNull, 'seats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seats', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($seats) && ($seats > 50)) {
            throw new \InvalidArgumentException('invalid value for $seats when calling CarData., must be smaller than or equal to 50.');
        }
        if (!is_null($seats) && ($seats < 1)) {
            throw new \InvalidArgumentException('invalid value for $seats when calling CarData., must be bigger than or equal to 1.');
        }

        $this->container['seats'] = $seats;

        return $this;
    }

    /**
     * Gets cargo_capacity
     *
     * @return int|null
     */
    public function getCargoCapacity()
    {
        return $this->container['cargo_capacity'];
    }

    /**
     * Sets cargo_capacity
     *
     * @param int|null $cargo_capacity Cargo capacity
     *
     * @return self
     */
    public function setCargoCapacity($cargo_capacity)
    {
        if (is_null($cargo_capacity)) {
            array_push($this->openAPINullablesSetToNull, 'cargo_capacity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cargo_capacity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cargo_capacity) && ($cargo_capacity < 0)) {
            throw new \InvalidArgumentException('invalid value for $cargo_capacity when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['cargo_capacity'] = $cargo_capacity;

        return $this;
    }

    /**
     * Gets net_weight
     *
     * @return float|null
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     *
     * @param float|null $net_weight Net weight in kg
     *
     * @return self
     */
    public function setNetWeight($net_weight)
    {
        if (is_null($net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($net_weight) && ($net_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_weight when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets gross_weight
     *
     * @return float|null
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param float|null $gross_weight Gross weight in kg
     *
     * @return self
     */
    public function setGrossWeight($gross_weight)
    {
        if (is_null($gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($gross_weight) && ($gross_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $gross_weight when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length Length in cm
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            array_push($this->openAPINullablesSetToNull, 'length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($length) && ($length < 0)) {
            throw new \InvalidArgumentException('invalid value for $length when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width Width in cm
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($width) && ($width < 0)) {
            throw new \InvalidArgumentException('invalid value for $width when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height Height in cm
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($height) && ($height < 0)) {
            throw new \InvalidArgumentException('invalid value for $height when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets price_terms
     *
     * @return \Dinas\ShippingClient\Model\PriceTerms|null
     */
    public function getPriceTerms()
    {
        return $this->container['price_terms'];
    }

    /**
     * Sets price_terms
     *
     * @param \Dinas\ShippingClient\Model\PriceTerms|null $price_terms price_terms
     *
     * @return self
     */
    public function setPriceTerms($price_terms)
    {
        if (is_null($price_terms)) {
            throw new \InvalidArgumentException('non-nullable price_terms cannot be null');
        }
        $this->container['price_terms'] = $price_terms;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price Unit price (as in invoice without freight)
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            array_push($this->openAPINullablesSetToNull, 'unit_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($unit_price) && ($unit_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling CarData., must be bigger than or equal to 0.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets purchase_date
     *
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->container['purchase_date'];
    }

    /**
     * Sets purchase_date
     *
     * @param \DateTime $purchase_date Purchase date
     *
     * @return self
     */
    public function setPurchaseDate($purchase_date)
    {
        if (is_null($purchase_date)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_date'] = $purchase_date;

        return $this;
    }

    /**
     * Gets damaged
     *
     * @return bool|null
     */
    public function getDamaged()
    {
        return $this->container['damaged'];
    }

    /**
     * Sets damaged
     *
     * @param bool|null $damaged Whether the car is damaged
     *
     * @return self
     */
    public function setDamaged($damaged)
    {
        if (is_null($damaged)) {
            array_push($this->openAPINullablesSetToNull, 'damaged');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('damaged', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['damaged'] = $damaged;

        return $this;
    }

    /**
     * Gets ship_date_limit
     *
     * @return \Dinas\ShippingClient\Model\ShipDateLimit|null
     */
    public function getShipDateLimit()
    {
        return $this->container['ship_date_limit'];
    }

    /**
     * Sets ship_date_limit
     *
     * @param \Dinas\ShippingClient\Model\ShipDateLimit|null $ship_date_limit ship_date_limit
     *
     * @return self
     */
    public function setShipDateLimit($ship_date_limit)
    {
        if (is_null($ship_date_limit)) {
            throw new \InvalidArgumentException('non-nullable ship_date_limit cannot be null');
        }
        $this->container['ship_date_limit'] = $ship_date_limit;

        return $this;
    }

    /**
     * Gets withhold
     *
     * @return string|null
     */
    public function getWithhold()
    {
        return $this->container['withhold'];
    }

    /**
     * Sets withhold
     *
     * @param string|null $withhold Reason why the car must not be handed to the client. Set it to null to allow us to do it.
     *
     * @return self
     */
    public function setWithhold($withhold)
    {
        if (is_null($withhold)) {
            array_push($this->openAPINullablesSetToNull, 'withhold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withhold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withhold'] = $withhold;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Any comments
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets dealer
     *
     * @return \Dinas\ShippingClient\Model\Dealer|null
     */
    public function getDealer()
    {
        return $this->container['dealer'];
    }

    /**
     * Sets dealer
     *
     * @param \Dinas\ShippingClient\Model\Dealer|null $dealer dealer
     *
     * @return self
     */
    public function setDealer($dealer)
    {
        if (is_null($dealer)) {
            throw new \InvalidArgumentException('non-nullable dealer cannot be null');
        }
        $this->container['dealer'] = $dealer;

        return $this;
    }

    /**
     * Gets pol
     *
     * @return string|null
     */
    public function getPol()
    {
        return $this->container['pol'];
    }

    /**
     * Sets pol
     *
     * @param string|null $pol Loading port code (e.g. TOY, OSK, KWS)
     *
     * @return self
     */
    public function setPol($pol)
    {
        if (is_null($pol)) {
            array_push($this->openAPINullablesSetToNull, 'pol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pol'] = $pol;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool|null
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool|null $hold \"Do not ship\" status: true = hold, false = ship. **Cannot be used together with 'ship_date_limit' field.**
     *
     * @return self
     */
    public function setHold($hold)
    {
        if (is_null($hold)) {
            array_push($this->openAPINullablesSetToNull, 'hold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hold'] = $hold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


