<?php
/**
 * CarDocuments
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * PHP client for Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@dinas.jp
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dinas\ShippingClient\Model;

use \ArrayAccess;
use \Dinas\ShippingClient\ObjectSerializer;

/**
 * CarDocuments Class Doc Comment
 *
 * @category Class
 * @description Documents attached to the car
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CarDocuments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarDocuments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'export_certificate' => '\Dinas\ShippingClient\Model\DocumentInfo',
        'vehicle_invoice' => '\Dinas\ShippingClient\Model\DocumentInfo',
        'vehicle_catalog' => '\Dinas\ShippingClient\Model\DocumentInfo',
        'price_confirmation' => '\Dinas\ShippingClient\Model\DocumentInfo',
        'explanatory_note' => '\Dinas\ShippingClient\Model\DocumentInfo',
        'repair_estimate' => '\Dinas\ShippingClient\Model\DocumentInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'export_certificate' => null,
        'vehicle_invoice' => null,
        'vehicle_catalog' => null,
        'price_confirmation' => null,
        'explanatory_note' => null,
        'repair_estimate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'export_certificate' => true,
        'vehicle_invoice' => true,
        'vehicle_catalog' => true,
        'price_confirmation' => true,
        'explanatory_note' => true,
        'repair_estimate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'export_certificate' => 'export_certificate',
        'vehicle_invoice' => 'vehicle_invoice',
        'vehicle_catalog' => 'vehicle_catalog',
        'price_confirmation' => 'price_confirmation',
        'explanatory_note' => 'explanatory_note',
        'repair_estimate' => 'repair_estimate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'export_certificate' => 'setExportCertificate',
        'vehicle_invoice' => 'setVehicleInvoice',
        'vehicle_catalog' => 'setVehicleCatalog',
        'price_confirmation' => 'setPriceConfirmation',
        'explanatory_note' => 'setExplanatoryNote',
        'repair_estimate' => 'setRepairEstimate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'export_certificate' => 'getExportCertificate',
        'vehicle_invoice' => 'getVehicleInvoice',
        'vehicle_catalog' => 'getVehicleCatalog',
        'price_confirmation' => 'getPriceConfirmation',
        'explanatory_note' => 'getExplanatoryNote',
        'repair_estimate' => 'getRepairEstimate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('export_certificate', $data ?? [], null);
        $this->setIfExists('vehicle_invoice', $data ?? [], null);
        $this->setIfExists('vehicle_catalog', $data ?? [], null);
        $this->setIfExists('price_confirmation', $data ?? [], null);
        $this->setIfExists('explanatory_note', $data ?? [], null);
        $this->setIfExists('repair_estimate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets export_certificate
     *
     * @return \Dinas\ShippingClient\Model\DocumentInfo|null
     */
    public function getExportCertificate()
    {
        return $this->container['export_certificate'];
    }

    /**
     * Sets export_certificate
     *
     * @param \Dinas\ShippingClient\Model\DocumentInfo|null $export_certificate export_certificate
     *
     * @return self
     */
    public function setExportCertificate($export_certificate)
    {
        if (is_null($export_certificate)) {
            array_push($this->openAPINullablesSetToNull, 'export_certificate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_certificate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_certificate'] = $export_certificate;

        return $this;
    }

    /**
     * Gets vehicle_invoice
     *
     * @return \Dinas\ShippingClient\Model\DocumentInfo|null
     */
    public function getVehicleInvoice()
    {
        return $this->container['vehicle_invoice'];
    }

    /**
     * Sets vehicle_invoice
     *
     * @param \Dinas\ShippingClient\Model\DocumentInfo|null $vehicle_invoice vehicle_invoice
     *
     * @return self
     */
    public function setVehicleInvoice($vehicle_invoice)
    {
        if (is_null($vehicle_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'vehicle_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vehicle_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vehicle_invoice'] = $vehicle_invoice;

        return $this;
    }

    /**
     * Gets vehicle_catalog
     *
     * @return \Dinas\ShippingClient\Model\DocumentInfo|null
     */
    public function getVehicleCatalog()
    {
        return $this->container['vehicle_catalog'];
    }

    /**
     * Sets vehicle_catalog
     *
     * @param \Dinas\ShippingClient\Model\DocumentInfo|null $vehicle_catalog vehicle_catalog
     *
     * @return self
     */
    public function setVehicleCatalog($vehicle_catalog)
    {
        if (is_null($vehicle_catalog)) {
            array_push($this->openAPINullablesSetToNull, 'vehicle_catalog');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vehicle_catalog', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vehicle_catalog'] = $vehicle_catalog;

        return $this;
    }

    /**
     * Gets price_confirmation
     *
     * @return \Dinas\ShippingClient\Model\DocumentInfo|null
     */
    public function getPriceConfirmation()
    {
        return $this->container['price_confirmation'];
    }

    /**
     * Sets price_confirmation
     *
     * @param \Dinas\ShippingClient\Model\DocumentInfo|null $price_confirmation price_confirmation
     *
     * @return self
     */
    public function setPriceConfirmation($price_confirmation)
    {
        if (is_null($price_confirmation)) {
            array_push($this->openAPINullablesSetToNull, 'price_confirmation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_confirmation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_confirmation'] = $price_confirmation;

        return $this;
    }

    /**
     * Gets explanatory_note
     *
     * @return \Dinas\ShippingClient\Model\DocumentInfo|null
     */
    public function getExplanatoryNote()
    {
        return $this->container['explanatory_note'];
    }

    /**
     * Sets explanatory_note
     *
     * @param \Dinas\ShippingClient\Model\DocumentInfo|null $explanatory_note explanatory_note
     *
     * @return self
     */
    public function setExplanatoryNote($explanatory_note)
    {
        if (is_null($explanatory_note)) {
            array_push($this->openAPINullablesSetToNull, 'explanatory_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('explanatory_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['explanatory_note'] = $explanatory_note;

        return $this;
    }

    /**
     * Gets repair_estimate
     *
     * @return \Dinas\ShippingClient\Model\DocumentInfo|null
     */
    public function getRepairEstimate()
    {
        return $this->container['repair_estimate'];
    }

    /**
     * Sets repair_estimate
     *
     * @param \Dinas\ShippingClient\Model\DocumentInfo|null $repair_estimate repair_estimate
     *
     * @return self
     */
    public function setRepairEstimate($repair_estimate)
    {
        if (is_null($repair_estimate)) {
            array_push($this->openAPINullablesSetToNull, 'repair_estimate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repair_estimate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repair_estimate'] = $repair_estimate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


