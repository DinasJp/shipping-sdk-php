<?php
/**
 * Voyage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * PHP client for Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@dinas.jp
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dinas\ShippingClient\Model;

use \ArrayAccess;
use \Dinas\ShippingClient\ObjectSerializer;

/**
 * Voyage Class Doc Comment
 *
 * @category Class
 * @description Voyage resource
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Voyage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Voyage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'status' => '\Dinas\ShippingClient\Model\VoyageStatus',
        'number' => 'string',
        'vessel' => 'string',
        'cut_date' => '\DateTime',
        'car_delivery_start_date' => '\DateTime',
        'car_delivery_end_date' => '\DateTime',
        'loading_start_date' => '\DateTime',
        'loading_end_date' => '\DateTime',
        'etd' => '\DateTime',
        'eta' => '\DateTime',
        'locked_at' => '\DateTime',
        'loaded_at' => '\DateTime',
        'departed_at' => '\DateTime',
        'arrived_at' => '\DateTime',
        'bl_ed' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'status' => null,
        'number' => null,
        'vessel' => null,
        'cut_date' => 'date',
        'car_delivery_start_date' => 'date',
        'car_delivery_end_date' => 'date',
        'loading_start_date' => 'date',
        'loading_end_date' => 'date',
        'etd' => 'date',
        'eta' => 'date',
        'locked_at' => 'date',
        'loaded_at' => 'date',
        'departed_at' => 'date',
        'arrived_at' => 'date',
        'bl_ed' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'number' => false,
        'vessel' => false,
        'cut_date' => false,
        'car_delivery_start_date' => false,
        'car_delivery_end_date' => false,
        'loading_start_date' => false,
        'loading_end_date' => false,
        'etd' => false,
        'eta' => false,
        'locked_at' => true,
        'loaded_at' => true,
        'departed_at' => true,
        'arrived_at' => true,
        'bl_ed' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'number' => 'number',
        'vessel' => 'vessel',
        'cut_date' => 'cut_date',
        'car_delivery_start_date' => 'car_delivery_start_date',
        'car_delivery_end_date' => 'car_delivery_end_date',
        'loading_start_date' => 'loading_start_date',
        'loading_end_date' => 'loading_end_date',
        'etd' => 'etd',
        'eta' => 'eta',
        'locked_at' => 'locked_at',
        'loaded_at' => 'loaded_at',
        'departed_at' => 'departed_at',
        'arrived_at' => 'arrived_at',
        'bl_ed' => 'bl_ed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'number' => 'setNumber',
        'vessel' => 'setVessel',
        'cut_date' => 'setCutDate',
        'car_delivery_start_date' => 'setCarDeliveryStartDate',
        'car_delivery_end_date' => 'setCarDeliveryEndDate',
        'loading_start_date' => 'setLoadingStartDate',
        'loading_end_date' => 'setLoadingEndDate',
        'etd' => 'setEtd',
        'eta' => 'setEta',
        'locked_at' => 'setLockedAt',
        'loaded_at' => 'setLoadedAt',
        'departed_at' => 'setDepartedAt',
        'arrived_at' => 'setArrivedAt',
        'bl_ed' => 'setBlEd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'number' => 'getNumber',
        'vessel' => 'getVessel',
        'cut_date' => 'getCutDate',
        'car_delivery_start_date' => 'getCarDeliveryStartDate',
        'car_delivery_end_date' => 'getCarDeliveryEndDate',
        'loading_start_date' => 'getLoadingStartDate',
        'loading_end_date' => 'getLoadingEndDate',
        'etd' => 'getEtd',
        'eta' => 'getEta',
        'locked_at' => 'getLockedAt',
        'loaded_at' => 'getLoadedAt',
        'departed_at' => 'getDepartedAt',
        'arrived_at' => 'getArrivedAt',
        'bl_ed' => 'getBlEd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('vessel', $data ?? [], null);
        $this->setIfExists('cut_date', $data ?? [], null);
        $this->setIfExists('car_delivery_start_date', $data ?? [], null);
        $this->setIfExists('car_delivery_end_date', $data ?? [], null);
        $this->setIfExists('loading_start_date', $data ?? [], null);
        $this->setIfExists('loading_end_date', $data ?? [], null);
        $this->setIfExists('etd', $data ?? [], null);
        $this->setIfExists('eta', $data ?? [], null);
        $this->setIfExists('locked_at', $data ?? [], null);
        $this->setIfExists('loaded_at', $data ?? [], null);
        $this->setIfExists('departed_at', $data ?? [], null);
        $this->setIfExists('arrived_at', $data ?? [], null);
        $this->setIfExists('bl_ed', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Voyage ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Dinas\ShippingClient\Model\VoyageStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Dinas\ShippingClient\Model\VoyageStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Voyage number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets vessel
     *
     * @return string|null
     */
    public function getVessel()
    {
        return $this->container['vessel'];
    }

    /**
     * Sets vessel
     *
     * @param string|null $vessel Vessel name
     *
     * @return self
     */
    public function setVessel($vessel)
    {
        if (is_null($vessel)) {
            throw new \InvalidArgumentException('non-nullable vessel cannot be null');
        }
        $this->container['vessel'] = $vessel;

        return $this;
    }

    /**
     * Gets cut_date
     *
     * @return \DateTime|null
     */
    public function getCutDate()
    {
        return $this->container['cut_date'];
    }

    /**
     * Sets cut_date
     *
     * @param \DateTime|null $cut_date Date when document acceptance stops
     *
     * @return self
     */
    public function setCutDate($cut_date)
    {
        if (is_null($cut_date)) {
            throw new \InvalidArgumentException('non-nullable cut_date cannot be null');
        }
        $this->container['cut_date'] = $cut_date;

        return $this;
    }

    /**
     * Gets car_delivery_start_date
     *
     * @return \DateTime|null
     */
    public function getCarDeliveryStartDate()
    {
        return $this->container['car_delivery_start_date'];
    }

    /**
     * Sets car_delivery_start_date
     *
     * @param \DateTime|null $car_delivery_start_date Car delivery start date
     *
     * @return self
     */
    public function setCarDeliveryStartDate($car_delivery_start_date)
    {
        if (is_null($car_delivery_start_date)) {
            throw new \InvalidArgumentException('non-nullable car_delivery_start_date cannot be null');
        }
        $this->container['car_delivery_start_date'] = $car_delivery_start_date;

        return $this;
    }

    /**
     * Gets car_delivery_end_date
     *
     * @return \DateTime|null
     */
    public function getCarDeliveryEndDate()
    {
        return $this->container['car_delivery_end_date'];
    }

    /**
     * Sets car_delivery_end_date
     *
     * @param \DateTime|null $car_delivery_end_date Car delivery end date
     *
     * @return self
     */
    public function setCarDeliveryEndDate($car_delivery_end_date)
    {
        if (is_null($car_delivery_end_date)) {
            throw new \InvalidArgumentException('non-nullable car_delivery_end_date cannot be null');
        }
        $this->container['car_delivery_end_date'] = $car_delivery_end_date;

        return $this;
    }

    /**
     * Gets loading_start_date
     *
     * @return \DateTime|null
     */
    public function getLoadingStartDate()
    {
        return $this->container['loading_start_date'];
    }

    /**
     * Sets loading_start_date
     *
     * @param \DateTime|null $loading_start_date Loading start date
     *
     * @return self
     */
    public function setLoadingStartDate($loading_start_date)
    {
        if (is_null($loading_start_date)) {
            throw new \InvalidArgumentException('non-nullable loading_start_date cannot be null');
        }
        $this->container['loading_start_date'] = $loading_start_date;

        return $this;
    }

    /**
     * Gets loading_end_date
     *
     * @return \DateTime|null
     */
    public function getLoadingEndDate()
    {
        return $this->container['loading_end_date'];
    }

    /**
     * Sets loading_end_date
     *
     * @param \DateTime|null $loading_end_date Loading end date
     *
     * @return self
     */
    public function setLoadingEndDate($loading_end_date)
    {
        if (is_null($loading_end_date)) {
            throw new \InvalidArgumentException('non-nullable loading_end_date cannot be null');
        }
        $this->container['loading_end_date'] = $loading_end_date;

        return $this;
    }

    /**
     * Gets etd
     *
     * @return \DateTime|null
     */
    public function getEtd()
    {
        return $this->container['etd'];
    }

    /**
     * Sets etd
     *
     * @param \DateTime|null $etd Estimated time of departure
     *
     * @return self
     */
    public function setEtd($etd)
    {
        if (is_null($etd)) {
            throw new \InvalidArgumentException('non-nullable etd cannot be null');
        }
        $this->container['etd'] = $etd;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return \DateTime|null
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param \DateTime|null $eta Estimated time of arrival
     *
     * @return self
     */
    public function setEta($eta)
    {
        if (is_null($eta)) {
            throw new \InvalidArgumentException('non-nullable eta cannot be null');
        }
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets locked_at
     *
     * @return \DateTime|null
     */
    public function getLockedAt()
    {
        return $this->container['locked_at'];
    }

    /**
     * Sets locked_at
     *
     * @param \DateTime|null $locked_at Date when voyage was locked for booking
     *
     * @return self
     */
    public function setLockedAt($locked_at)
    {
        if (is_null($locked_at)) {
            array_push($this->openAPINullablesSetToNull, 'locked_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locked_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locked_at'] = $locked_at;

        return $this;
    }

    /**
     * Gets loaded_at
     *
     * @return \DateTime|null
     */
    public function getLoadedAt()
    {
        return $this->container['loaded_at'];
    }

    /**
     * Sets loaded_at
     *
     * @param \DateTime|null $loaded_at Date when loading completed
     *
     * @return self
     */
    public function setLoadedAt($loaded_at)
    {
        if (is_null($loaded_at)) {
            array_push($this->openAPINullablesSetToNull, 'loaded_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loaded_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loaded_at'] = $loaded_at;

        return $this;
    }

    /**
     * Gets departed_at
     *
     * @return \DateTime|null
     */
    public function getDepartedAt()
    {
        return $this->container['departed_at'];
    }

    /**
     * Sets departed_at
     *
     * @param \DateTime|null $departed_at Date when vessel departed
     *
     * @return self
     */
    public function setDepartedAt($departed_at)
    {
        if (is_null($departed_at)) {
            array_push($this->openAPINullablesSetToNull, 'departed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departed_at'] = $departed_at;

        return $this;
    }

    /**
     * Gets arrived_at
     *
     * @return \DateTime|null
     */
    public function getArrivedAt()
    {
        return $this->container['arrived_at'];
    }

    /**
     * Sets arrived_at
     *
     * @param \DateTime|null $arrived_at Date when vessel arrived
     *
     * @return self
     */
    public function setArrivedAt($arrived_at)
    {
        if (is_null($arrived_at)) {
            array_push($this->openAPINullablesSetToNull, 'arrived_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('arrived_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['arrived_at'] = $arrived_at;

        return $this;
    }

    /**
     * Gets bl_ed
     *
     * @return string|null
     */
    public function getBlEd()
    {
        return $this->container['bl_ed'];
    }

    /**
     * Sets bl_ed
     *
     * @param string|null $bl_ed Bill of lading and export declaration document URL
     *
     * @return self
     */
    public function setBlEd($bl_ed)
    {
        if (is_null($bl_ed)) {
            array_push($this->openAPINullablesSetToNull, 'bl_ed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bl_ed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bl_ed'] = $bl_ed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


