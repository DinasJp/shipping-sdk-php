<?php
/**
 * CarSyncResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * PHP client for Shipping API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@dinas.jp
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dinas\ShippingClient\Model;

use \ArrayAccess;
use \Dinas\ShippingClient\ObjectSerializer;

/**
 * CarSyncResponse Class Doc Comment
 *
 * @category Class
 * @package  Dinas\ShippingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CarSyncResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarSyncResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ok' => 'bool',
        'created' => 'string[]',
        'updated' => 'string[]',
        'booking_cancelled' => 'string[]',
        'booking_not_cancelled' => 'string[]',
        'errors' => '\Dinas\ShippingClient\Model\CarError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ok' => null,
        'created' => null,
        'updated' => null,
        'booking_cancelled' => null,
        'booking_not_cancelled' => null,
        'errors' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ok' => false,
        'created' => false,
        'updated' => false,
        'booking_cancelled' => false,
        'booking_not_cancelled' => false,
        'errors' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ok' => 'ok',
        'created' => 'created',
        'updated' => 'updated',
        'booking_cancelled' => 'bookingCancelled',
        'booking_not_cancelled' => 'bookingNotCancelled',
        'errors' => 'errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ok' => 'setOk',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'booking_cancelled' => 'setBookingCancelled',
        'booking_not_cancelled' => 'setBookingNotCancelled',
        'errors' => 'setErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ok' => 'getOk',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'booking_cancelled' => 'getBookingCancelled',
        'booking_not_cancelled' => 'getBookingNotCancelled',
        'errors' => 'getErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ok', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('booking_cancelled', $data ?? [], null);
        $this->setIfExists('booking_not_cancelled', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ok
     *
     * @return bool|null
     */
    public function getOk()
    {
        return $this->container['ok'];
    }

    /**
     * Sets ok
     *
     * @param bool|null $ok False if there are errors
     *
     * @return self
     */
    public function setOk($ok)
    {
        if (is_null($ok)) {
            throw new \InvalidArgumentException('non-nullable ok cannot be null');
        }
        $this->container['ok'] = $ok;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string[]|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string[]|null $created Chassis numbers created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string[]|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string[]|null $updated Chassis numbers updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets booking_cancelled
     *
     * @return string[]|null
     */
    public function getBookingCancelled()
    {
        return $this->container['booking_cancelled'];
    }

    /**
     * Sets booking_cancelled
     *
     * @param string[]|null $booking_cancelled Chassis numbers whose booking got cancelled
     *
     * @return self
     */
    public function setBookingCancelled($booking_cancelled)
    {
        if (is_null($booking_cancelled)) {
            throw new \InvalidArgumentException('non-nullable booking_cancelled cannot be null');
        }
        $this->container['booking_cancelled'] = $booking_cancelled;

        return $this;
    }

    /**
     * Gets booking_not_cancelled
     *
     * @return string[]|null
     */
    public function getBookingNotCancelled()
    {
        return $this->container['booking_not_cancelled'];
    }

    /**
     * Sets booking_not_cancelled
     *
     * @param string[]|null $booking_not_cancelled Chassis numbers whose booking was not cancelled
     *
     * @return self
     */
    public function setBookingNotCancelled($booking_not_cancelled)
    {
        if (is_null($booking_not_cancelled)) {
            throw new \InvalidArgumentException('non-nullable booking_not_cancelled cannot be null');
        }
        $this->container['booking_not_cancelled'] = $booking_not_cancelled;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Dinas\ShippingClient\Model\CarError[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Dinas\ShippingClient\Model\CarError[]|null $errors List of errors encountered during sync
     *
     * @return self
     */
    public function setErrors($errors)
    {
        if (is_null($errors)) {
            throw new \InvalidArgumentException('non-nullable errors cannot be null');
        }
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


